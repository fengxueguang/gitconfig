[user]
	email = xueguang668@163.com
	name = fengxueguang

#全局的配置
# core {{{
[core]
    quotepath = false 
	autocrlf = false #自动换行
    repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	ignorecase = false
    editor = /usr/bin/vim
    excludesfile = /Users/npaolucci/.gitignore_global
    pager=less -x4
    preloadindex = true
    fscache = true

#}}}
# color {{{
[color]
     ui = true
[color "diff"]
        meta = yellow bold
        frag = magenta bold
        old = red bold
        new = green bold
#[color]
 #   branch = auto
 #   diff = auto
#    status = auto

[color "branch"]
#    current = red reverse
    local = white
    remote = blue

[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white

[color "status"]
  added = green
  changed = red
  untracked = cyan

# }}}
# push/pull/diff/options {{{
[push]
    default = simple
[diff]
  memonicprefix = true

[apply]
  whitespace = nowarn

#}}}
# difftools {{{
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

# }}}
# alias {{{
[alias]
    st = status -s

    cl = clone

    ci = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    filelog = log -u
    fl = log -u

    ai = add --interactive

    co = checkout
    br = branch 
    #"!git branch -ra | grep -v done"
    bra = branch -ra
    #list commands
    lg1 = "log --all --pretty=oneline --decorate=full  --graph --branches --abbrev-commit"
    lg2 = "log --all --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative --show-signature --branches"
    lg = "log --graph --all --branches --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(auto)%d%C(reset)'"
    le = log --oneline --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    #list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    diff = diff --word-diff
    d = diff --word-diff
    dc = diff --cached
    #list modified files in last commit
    dl = "!git ll -1"
    #diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    branch = branch -ra

    #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    #git svn
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
    #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    #grep on filename
    f = "!git ls-files | grep -i"

    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    #assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    #merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #subtree add
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    #add bitbucket remote
    ra = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"

    #merge to  合并到master合并到dev
    mtomaster =! "currBranch=$(git status|grep 位于分支) && currBranch=${currBranch/位于分支/} &&git checkout master && git merge --no-ff $currBranch -m \"Merge branch '"$currBranch"' \" && git push && git checkout $currBranch"
    #合并到dev
    mtodev =! "currBranch=$(git status|grep 位于分支) && currBranch=${currBranch/位于分支/} &&git checkout develop && git merge --no-ff $currBranch -m \"Merge branch '"$currBranch"' to develop \" && git push && git checkout $currBranch"
    #自定义合并到那里
    mergeto =! "currBranch=$(git status|grep 位于分支) && currBranch=${currBranch/位于分支/} &&git checkout $1 && git merge --no-ff $currBranch -m \"Merge branch '"$currBranch"' to $1 \" &&  git push && git checkout $currBranch && echo $currBranch--合并到了==$1"
    
    bs = ! "echo '***********************************************************************' && git branch -vv && echo '' && echo ======================================================================= && echo '' && git status -s && echo '' && echo '&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&' && echo '' "

# }}}
[rerere]
	enabled = true
[status]
	submodulesummary = false
